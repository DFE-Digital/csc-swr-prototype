const cacheName = 'v1' 

const cacheAssets = [
  "<%= asset_pack_path 'application.js' %>",
  "<%= asset_pack_path 'application.css' %>",
  '/offline.html',
  '/manifest.json'
]
// Call install event

self.addEventListener('install', (e) => {
  console.log('Service Worker: Installed')
  e.waitUntil(
    caches
      .open(cacheName)
      .then(cache => {
        console.log('Service Worker: Caching Files')
        cache.addAll(cacheAssets);
      })
      .then(() => self.skipWaiting())
  )
})

self.addEventListener('activate', (e) => {
  console.log('Service Worker: Activated')
  // Remove unwanted caches
  e.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cache => {
          if(cache !== cacheName) {
            console.log('Service Worker: Clearing Old Cache');
            return caches.delete(cache)
          }
        })
      )
    })
  )
})

// Call Fetch Event
self.addEventListener('fetch', (e) => {
  e.respondWith(
    // try to return untouched request from network first
    fetch(e.request).catch(function() {
      
      // This will get the url endpoint
      let link = e.request.url.split('/')

      // if it fails, try to return request from the cache
      return caches.match(link[link.length - 1]).then(function(response) {
        if (response) {
          return response;
        }
        
        // if not found in cache, return default offline content for navigate requests
        if (e.request.mode === 'navigate' ||
          (e.request.method === 'GET' && e.request.headers.get('accept').includes('text/html'))) {
          return caches.match('/offline.html');
        }
      })
    })
  );
}
)