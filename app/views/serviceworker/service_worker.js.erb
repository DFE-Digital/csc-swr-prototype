const cacheName = 'v1' 

const cacheAssets = [
  "<%= asset_pack_path 'application.js' %>",
  "<%= asset_pack_path 'application.css' %>",
  '/offline.html',
  '/404'
]
// Call install event

self.addEventListener('install', (e) => {
  console.log('Service Worker: Installed')
  e.waitUntil(
    caches
      .open(cacheName)
      .then(cache => {
        console.log('Service Worker: Caching Files')
        cache.addAll(cacheAssets)
      })
      .then(() => self.skipWaiting())
  )
})

self.addEventListener('activate', (e) => {
  console.log('Service Worker: Activated')
  // Remove unwanted caches
  e.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cache => {
          if(cache !== cacheName) {
            console.log('Service Worker: Clearing Old Cache');
            return caches.delete(cache)
          }
        })
      )
    })
  )
})

// Call Fetch Event
self.addEventListener('fetch', (e) => {
  e.respondWith(
    // try to return untouched request from network first
    fetch(e.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(e.request).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (e.request.mode === 'navigate' ||
          (e.request.method === 'GET' && e.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", e);
          return caches.match('/offline.html');
        }
      })
    })
  );
}
)


// var CACHE_VERSION = 'v1';
// var CACHE_NAME = CACHE_VERSION + ':sw-cache-csc-swr-prototype';


// self.addEventListener('install', function(event) {
//   event.waitUntil(
//     caches.open(CACHE_NAME).then(function(cache) {
//       console.log('I am inside the cache')
//       return cache.addAll(
//         [
//           "<%= asset_pack_path 'application.js' %>",
//           "<%= asset_pack_path 'application.css' %>",
//           "/offline.html",
//           "/"
//         ]
//       );
//     })
//   );
// });



// self.addEventListener('fetch', event => {
//   console.log('Fetch event for ', event.request.url);
//   event.respondWith(
//     caches.match(event.request)
//     .then(response => {
//       if (response) {
//         console.log('Found ', event.request.url, ' in cache');
//         return response;
//       }
//       console.log('Network request for ', event.request.url);
//       return fetch(event.request)

//       // TODO 4 - Add fetched files to the cache

//     }).catch(error => {
//       console.log('it looks like you are offline')
//       // TODO 6 - Respond with custom offline page

//     })
//   );
// });



// function onInstall(event) {
//   console.log('[Serviceworker]', "Installing!", event);
//   event.waitUntil(
//     caches.open(CACHE_NAME).then(function prefill(cache) {
//       console.log('I am inside the cache')
//       return cache.addAll([
//         // '<%= asset_pack_path 'application.js' %>',
//         // '<%= asset_pack_path 'application.css' %>',
//         '/offline.html'
//       ]);
//     })
//   );
// }

// self.addEventListener('install', onInstall);